name: 🐳 Build and Deploy Docker Image

on:
  push:
    branches:
      - master
      - main
      - debug-pipeline-scss
    tags:
      - v*
  pull_request:
    branches: ["master", "main", "debug-pipeline-scss"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: spotify-tools

jobs:
  test:
    name: 🧪 Test Application
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r flask/requirements.txt
          pip install pytest flake8

      - name: 🔍 Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 flask/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 flask/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: ✅ Test with pytest (if tests exist)
        run: |
          if [ -d "flask/tests" ] || [ -f "flask/test_*.py" ]; then
            pytest flask/
          else
            echo "No tests found, skipping test step"
          fi

  build-and-push:
    name: 🐳 Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: � Debug Build Environment
        if: contains(github.ref, 'debug-pipeline-scss')
        run: |
          echo "=== BUILD ENVIRONMENT DEBUG ==="
          echo "Branch: ${{ github.ref }}"
          echo "Architecture: $(uname -m)"
          echo "Docker version: $(docker version)"
          echo "Buildx platforms: $(docker buildx ls)"
          echo "Available space: $(df -h)"
          echo "=== SCSS FILE CHECK ==="
          ls -la flask/app/static/css/
          head -10 flask/app/static/css/main.scss

      - name: �🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🚀 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./flask
          file: ./flask/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ contains(github.ref, 'debug-pipeline-scss') && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
          outputs: ${{ contains(github.ref, 'debug-pipeline-scss') && 'type=docker' || 'type=registry' }}

      - name: 🧪 Test Built Image (Debug only)
        if: contains(github.ref, 'debug-pipeline-scss')
        run: |
          echo "=== TESTING BUILT IMAGE ==="
          # Get the image tag
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing image: $IMAGE_TAG"
          
          # Run container in background
          docker run -d --name test-container \
            -e FLASK_SECRET_KEY=test-secret \
            -e FLASK_ENV=production \
            -p 5000:5000 \
            $IMAGE_TAG
          
          # Wait for startup
          sleep 10
          
          # Check logs
          echo "=== CONTAINER LOGS ==="
          docker logs test-container
          
          # Test SCSS compilation
          echo "=== TESTING SCSS COMPILATION ==="
          docker exec test-container python -c "
          import sys
          print(f'Python version: {sys.version}')
          try:
              from app import app
              with app.app_context():
                  from flask_assets import Environment
                  assets = Environment(app)
                  bundle = assets['scss_all']
                  urls = bundle.urls()
                  print(f'✅ SCSS compilation successful: {urls}')
          except Exception as e:
              print(f'❌ SCSS compilation failed: {e}')
              import traceback
              traceback.print_exc()
              exit(1)
          "
          
          # HTTP test
          echo "=== HTTP TEST ==="
          curl -f http://localhost:5000/ || echo "HTTP test failed"
          
          # Cleanup
          docker stop test-container
          docker rm test-container

  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'

    steps:
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          format: "table"
          exit-code: "0" # Don't fail the build on vulnerabilities
