name: 🐍 Python CI

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  lint-and-test:
    name: 🧪 Lint and Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.11, 3.12]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r flask/requirements.txt
          pip install -r flask/requirements-prod.txt
          pip install pytest flake8 black isort mypy

      - name: 🔍 Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 flask/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 flask/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🎨 Check code formatting with black
        run: black --check flask/

      - name: 📋 Check import sorting with isort
        run: isort --check-only --profile black flask/ --diff

      - name: 🔬 Type checking with mypy
        run: |
          if [ -f "flask/mypy.ini" ] || [ -f "flask/pyproject.toml" ]; then
            mypy flask/
          else
            echo "No mypy configuration found, skipping type checking"
          fi

      - name: ✅ Test with pytest
        run: |
          if [ -d "flask/tests" ] || find flask/ -name "test_*.py" -type f | grep -q .; then
            pytest flask/ --verbose --tb=short
          else
            echo "No tests found, skipping test step"
            # Create a simple smoke test
            cd flask && python -c "from app import app; print('✅ App imports successfully')"
          fi

      - name: 📊 Test coverage (if tests exist)
        run: |
          if [ -d "flask/tests" ] || find flask/ -name "test_*.py" -type f | grep -q .; then
            pip install coverage
            coverage run -m pytest flask/
            coverage report --show-missing
          fi
